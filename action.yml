name: "Vibranium Action"
description: "An action to read a JSON file and make an API call"
branding:
  color: "blue"
  icon: "shield"
inputs:
  file-path:
    description: "Path to the JSON file in the repository"
    required: true
  api-url:
    description: "The API endpoint to call"
    required: true
runs:
  using: "composite"
  steps:
    - name: Setup Python Environment
      run: |
        python -m venv .venv
        source .venv/bin/activate
        pip install requests
      shell: bash
    - name: Run Python Script
      run: |
        python -c "
        import os
        import requests
        import json
        import sys

        # Get environment variables
        file_path = os.getenv('INPUT_FILE_PATH')
        api_key = os.getenv('API_KEY')

        # Check if the file exists
        if not os.path.isfile(file_path):
            raise FileNotFoundError(f'The file {file_path} does not exist')

        # Read the file and send it to the API
        with open(file_path, 'rb') as file:
            data = json.load(file)
        
            # Linter
            spec_data = {
                'spec' : data
            }

            lint_response = requests.post('https://vibranium-api-guard.onrender.com/api/lint/linter', json=spec_data)

            if lint_response.status_code == 200:
                print('Linting successful')
                print('Ingesting APIs')
                response = requests.post('https://vibranium-api-guard.onrender.com/api/endpoints/ingest', json=data)
                # Check the response
                if response.status_code == 200:
                    print('Collection updated successfully')
                else:
                    print(f'Failed to send file. Status code: {response.status_code}')
                    print(f'Response: {response.text}')
            elif lint_response.status_code == 400:
                print('Linting failed')
                for issue in lint_response.json():
                    file_path = file_path  # Replace with correct file reference if available
                    line_number = error['range']['start']['line']
                    message = error['message']
                    print(f'::error file={file_path},line={line_number}::{message}')
                sys.exit(1) # Exit with error code 1 to indicate failure"
      shell: bash
      env:
        INPUT_FILE_PATH: ${{ inputs.file-path }}
        INPUT_API_URL: ${{ inputs.api-url }}
